class ZKB_CL_SERVICE definition
  public
  abstract
  create public .

public section.

  methods SEND_REQUEST
  final
    importing
      !IREF_REQUEST_DATA type ref to DATA optional
    exporting
      !EV_RESPONSE_TEXT type STRING
    changing
      !CREF_RESPONSE_DATA type ref to DATA optional
    raising
      ZCX_KB_WS_ERROR_TOKEN_EXPIRED
      ZCX_KB_WS_ERROR .
  class-methods PARSE_JSON_TO_DATA
    importing
      !IV_JSON_STRING type STRING
    changing
      !CREF_DATA type ref to DATA .
protected section.

  types:
    BEGIN OF GTS_CREDENTIALS,
      client_id     type string,
      client_secret type string,
      user          type string,
      password      type string,
      token_url     type string,
      service_url   type string,
    end of GTS_CREDENTIALS .

  constants:
    BEGIN OF GC_ERROR_TEXTS,
      http_create   type SOTR_CONC value 'DEAE8EE6C39F1ED9869A7188AB3E20FC',
      http_send     type SOTR_CONC value 'DEAE8EE6C39F1ED9869ADF3BB699C0FC',
      http_receive  type SOTR_CONC value 'DEAE8EE6C39F1ED9869B0152861600FC',
      http_message  type SOTR_CONC value 'DEAE8EE6C39F1ED9869B17AF915C80FC',
      json_parsing  type SOTR_CONC value 'DEAE8EE6C39F1ED9869B27D22FE1E0FC',
    end of GC_ERROR_TEXTS .
  data MV_PATH_SERVICE type ZKBE_SERVICE_PATH value '/services/apexrest/KimbleOne/v1.0/Export/IFI00_Example'. "#EC NOTEXT .
  interface IF_HTTP_ENTITY load .
  data MV_REQUEST_METHOD type STRING value IF_HTTP_ENTITY=>CO_REQUEST_METHOD_POST. "#EC NOTEXT .
  class-data GS_CREDENTIALS type GTS_CREDENTIALS .

  class-methods GET_TOKEN
    returning
      value(RV_TOKEN) type STRING .
  methods GET_JSON_FROM_INPUT
    importing
      !IREF_DATA type ref to DATA
    returning
      value(RV_JSON_STRING) type STRING .
  methods GET_DATA_FROM_JSON
    importing
      !IV_JSON_STRING type STRING
    changing
      !CREF_DATA type ref to DATA .
  class-methods GET_CREDENTIALS
    returning
      value(RS_RESULT) type GTS_CREDENTIALS .
private section.

  class-data GV_TOKEN type STRING .
  class-data GV_URL_TOKEN type STRING value 'https://test.salesforce.com/services/oauth2/token'. "#EC NOTEXT .
  data MV_URL_SERVER type STRING value 'https://ntt-data-emea-sms--kbl.cs102.my.salesforce.com'. "#EC NOTEXT .
  constants GC_SSL_ID type SSFAPPLSSL value 'WSSE'. "#EC NOTEXT

  class-methods REQUEST_TOKEN
    raising
      ZCX_KB_WS_ERROR .
  methods CALL_SERVICE
    importing
      !IV_JSON_REQUEST type STRING
    returning
      value(RV_JSON_RESPONSE) type STRING
    raising
      resumable(ZCX_KB_WS_ERROR_TOKEN_EXPIRED)
      ZCX_KB_WS_ERROR .
ENDCLASS.



CLASS ZKB_CL_SERVICE IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZKB_CL_SERVICE->CALL_SERVICE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_JSON_REQUEST                TYPE        STRING
* | [<-()] RV_JSON_RESPONSE               TYPE        STRING
* | [!CX!] ZCX_KB_WS_ERROR_TOKEN_EXPIRED
* | [!CX!] ZCX_KB_WS_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD call_service.
  CONSTANTS:
    lc_token_expired        TYPE zkb_error_response-errorcode VALUE 'INVALID_SESSION_ID',
    lc_status_200           TYPE i VALUE '200'.
  DATA:
    lv_service_url          TYPE string,
    lo_http_client          TYPE REF TO if_http_client,
    lo_json_parser          TYPE REF TO zkb_cl_gis_json_parser,
    lv_http_response_status TYPE i,
    lv_response_json        TYPE string,
    lref_response           TYPE REF TO data,
    lt_error_response       TYPE TABLE OF zkb_error_response.
  FIELD-SYMBOLS:
    <ls_error_response>     TYPE zkb_error_response.

  IF gs_credentials IS INITIAL.
    gs_credentials = get_credentials( ).
  ENDIF.
  mv_url_server = gs_credentials-service_url.

  CLEAR rv_json_response.

  CONCATENATE mv_url_server mv_path_service
    INTO lv_service_url.

  CALL METHOD cl_http_client=>create_by_url
    EXPORTING
      url                = lv_service_url
      ssl_id             = gc_ssl_id
    IMPORTING
      client             = lo_http_client
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_kb_ws_error
      EXPORTING
        textid = gc_error_texts-http_create.
  ELSE.
    lo_http_client->refresh_cookie( ).
    lo_http_client->refresh_request( ).
    lo_http_client->refresh_response( ).
    lo_http_client->request->set_method( mv_request_method ).
*    lo_http_client->request->set_version( '1001' ).
*
*    lo_http_client->request->set_header_field(
*      EXPORTING
*        name  = 'Accept'
*        value = 'application/json' ).

    lo_http_client->request->set_header_field(
      EXPORTING
        name  = 'Authorization'
        value = get_token( ) ).

    CALL METHOD lo_http_client->request->set_cdata
      EXPORTING
        data = iv_json_request.

*   send method on service
    CALL METHOD lo_http_client->send
      EXCEPTIONS
        http_communication_failure = 1
        http_invalid_state         = 2
        http_processing_failed     = 3
        OTHERS                     = 4.

    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_kb_ws_error
        EXPORTING
          textid = gc_error_texts-http_send.
    ELSE.
      lv_response_json = lo_http_client->response->get_cdata( ).
      lo_http_client->response->get_status( IMPORTING code = lv_http_response_status ).

      CLEAR: lv_response_json, lv_http_response_status.

*     receive method on service
      CALL METHOD lo_http_client->receive
        EXCEPTIONS
          http_communication_failure = 1
          http_invalid_state         = 2
          http_processing_failed     = 3
          OTHERS                     = 4.
      IF sy-subrc NE 0.
        RAISE EXCEPTION TYPE zcx_kb_ws_error
          EXPORTING
            textid = gc_error_texts-http_receive.
      ELSE.
        lv_response_json = lo_http_client->response->get_cdata( ).
        lo_http_client->response->get_status( IMPORTING code = lv_http_response_status ).

        IF lv_http_response_status NE lc_status_200.
          "Check for errors
          CLEAR lt_error_response.
          GET REFERENCE OF lt_error_response INTO lref_response.
          parse_json_to_data(
            EXPORTING
              iv_json_string = lv_response_json
            CHANGING
              cref_data      = lref_response ).
          IF lt_error_response[] IS NOT INITIAL.
            READ TABLE lt_error_response INDEX 1 ASSIGNING <ls_error_response>.
            IF <ls_error_response> IS ASSIGNED AND <ls_error_response>-errorcode IS NOT INITIAL.
              CASE <ls_error_response>-errorcode.
                WHEN lc_token_expired.
                  RAISE RESUMABLE EXCEPTION TYPE zcx_kb_ws_error_token_expired.
                WHEN OTHERS.
                  RAISE EXCEPTION TYPE zcx_kb_ws_error
                    EXPORTING
                      textid = gc_error_texts-http_receive.
              ENDCASE.
            ENDIF.
          ENDIF.
        ELSE.
          rv_json_response = lv_response_json.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Protected Method ZKB_CL_SERVICE=>GET_CREDENTIALS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RS_RESULT                      TYPE        GTS_CREDENTIALS
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD get_credentials.
  DATA:
    lt_service     TYPE TABLE OF zkb_kimble_srv,
    lv_string1     TYPE string.
  FIELD-SYMBOLS:
    <ls_service>   TYPE zkb_kimble_srv.

  CLEAR rs_result.

  SELECT * FROM zkb_kimble_srv
    INTO TABLE lt_service.
  LOOP AT lt_service ASSIGNING <ls_service>.
    CASE <ls_service>-field.
      WHEN 'TOKEN_URL'.
        rs_result-token_url = <ls_service>-value.
      WHEN 'SERVICE_URL'.
        rs_result-service_url = <ls_service>-value.
      WHEN 'USER'.
        rs_result-user = <ls_service>-value.
      WHEN 'PASSWORD'.
        lv_string1 = <ls_service>-value.
        rs_result-password = zkb_cl_kimble_tools=>decode_value( lv_string1 ).
      WHEN 'CLIENT_SECRET'.
        lv_string1 = <ls_service>-value.
        rs_result-client_secret = zkb_cl_kimble_tools=>decode_value( lv_string1 ).
      WHEN 'CLIENT_ID'.
        lv_string1 = <ls_service>-value.
        rs_result-client_id = zkb_cl_kimble_tools=>decode_value( lv_string1 ).
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZKB_CL_SERVICE->GET_DATA_FROM_JSON
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_JSON_STRING                 TYPE        STRING
* | [<-->] CREF_DATA                      TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD GET_DATA_FROM_JSON.
  parse_json_to_data(
    EXPORTING
      iv_json_string = iv_json_string
    CHANGING
      cref_data      = cref_data ).
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZKB_CL_SERVICE->GET_JSON_FROM_INPUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IREF_DATA                      TYPE REF TO DATA
* | [<-()] RV_JSON_STRING                 TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD GET_JSON_FROM_INPUT.
  CLEAR rv_json_string.

  "Example:

*  DATA:
*    lo_json_parser    TYPE REF TO zkb_cl_gis_json_parser,
*    lt_transformation TYPE gis_transformation_tty.
*  FIELD-SYMBOLS:
*    <ls_transform>    TYPE transformation_sty.
*
*  APPEND INITIAL LINE TO lt_transformation ASSIGNING <ls_transform>.
*  <ls_transform>-COMP_PATH  = ''.
*  <ls_transform>-TRANS_NAME = ''.
*
*  CREATE OBJECT lo_json_parser.
*  TRY.
*      lo_json_parser->if_gis_parser~serialize(
*        EXPORTING
*          abap_data      = iref_data
*          transformation = lt_transformation
*        RECEIVING
*          result         = rv_json_string  ).
*    CATCH cx_root.
*  ENDTRY.

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Protected Method ZKB_CL_SERVICE=>GET_TOKEN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_TOKEN                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD GET_TOKEN.
  IF gv_token IS INITIAL.
    request_token( ).
  ENDIF.
  rv_token = gv_token.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZKB_CL_SERVICE=>PARSE_JSON_TO_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_JSON_STRING                 TYPE        STRING
* | [<-->] CREF_DATA                      TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD PARSE_JSON_TO_DATA.
  DATA:
    lo_json_parser   TYPE REF TO zkb_cl_gis_json_parser.

  CREATE OBJECT lo_json_parser.
  TRY.
      lo_json_parser->zkb_if_gis_parser~deserialize(
        EXPORTING
          native_string = iv_json_string
        CHANGING
          abap_data     = cref_data ).
    CATCH cx_root.
  ENDTRY.

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZKB_CL_SERVICE=>REQUEST_TOKEN
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_KB_WS_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD request_token.
  DATA:
    lv_http_response_status TYPE i,
    lv_request_parameters   TYPE string,
    lv_response_json        TYPE string,
    lo_json_parser          TYPE REF TO zkb_cl_gis_json_parser,
    ls_token_response       TYPE zkb_token_response,
    lref_response           TYPE REF TO data,

    lo_http_client          TYPE REF TO if_http_client.

*  CONCATENATE
*  '{'
*  '   "access_token": "00D0O000000spfs!AQMAQH0Cb7750NlvFnRDouIMpfR_MEp5m8VqJxWbdAUMyYty8xtRW0bxf32uRerXUCJF.n9sMajb1Q3mdcBepZgrOGWTc5k8",'
*  '   "instance_url": "https://eu9.salesforce.com",'
*  '   "id": "https://login.salesforce.com/id/00D0O000000spfsUAA/0050O00000902N0QAI",'
*  '   "token_type": "Bearer",'
*  '   "issued_at": "1547544937423",'
*  '   "signature": "8kG6+syWla/ZtSsDPd6e6OPVbIN8FKeKqQZ47gMvKiE="'
*  '}'
*  INTO lv_response_json.

  gv_url_token = gs_credentials-token_url.

  CLEAR gv_token.

  CALL METHOD cl_http_client=>create_by_url
    EXPORTING
      url                = gv_url_token
      ssl_id             = gc_ssl_id
    IMPORTING
      client             = lo_http_client
    EXCEPTIONS
      argument_not_found = 1
      plugin_not_active  = 2
      internal_error     = 3
      OTHERS             = 4.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_kb_ws_error
      EXPORTING
        textid = gc_error_texts-http_create.
  ELSE.
    lo_http_client->refresh_cookie( ).
    lo_http_client->refresh_request( ).
    lo_http_client->refresh_response( ).
    lo_http_client->request->set_method( if_http_entity=>co_request_method_post ).
    lo_http_client->request->set_version( '1001' ).

    lo_http_client->request->set_header_field(
      EXPORTING
        name  = 'Accept'
        value = 'application/json'  ).

    lo_http_client->request->set_header_field(
      EXPORTING
        name  = 'Content-Type'
        value = 'application/x-www-form-urlencoded'  ).

*    concatenate
*      'grant_type=password'
**      '&client_id=3MVG95AcBeaB55lWZIQciFiW957FFSuDrbCPzecSE94OTR23d6747CweLPa3qYSYIKYAzZR_8w8cFyxgCzUDj'
**      '&client_secret=3840643387626201315'
*      '&client_id=3MVG9lcxCTdG2VbvJ19Zyc6tGmJjR74liQF7LADctH7Kfg.jAfTEd2QaXBsRFbSj2sTXK3rdYGVsbusWQPU0V'
*      '&client_secret=1A8A9FEC110BFFCD98C7D74629281FBA672907B2ED548DAE508B3D395CBC1864'
*      '&username=SAP.interface@nttkimble.test'
*      '&password=SAPInt012WQz7wNaC8NZrWVaKXLggDge1y'
*      into lv_request_parameters.

    CONCATENATE
      'grant_type=password'
      '&client_id=' gs_credentials-client_id
      '&client_secret=' gs_credentials-client_secret
      '&username=' gs_credentials-user
      '&password=' gs_credentials-password
      INTO lv_request_parameters.

*
    CALL METHOD lo_http_client->request->set_cdata
      EXPORTING
        data = lv_request_parameters.

*   send method on service
    CALL METHOD lo_http_client->send
      EXCEPTIONS
        http_communication_failure = 1
        http_invalid_state         = 2
        http_processing_failed     = 3
        OTHERS                     = 4.

    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_kb_ws_error
        EXPORTING
          textid = gc_error_texts-http_send.
    ELSE.
      lv_response_json = lo_http_client->response->get_cdata( ).
      lo_http_client->response->get_status( IMPORTING code = lv_http_response_status ).

      CLEAR: lv_response_json, lv_http_response_status.

*     receive method on service
      CALL METHOD lo_http_client->receive
        EXCEPTIONS
          http_communication_failure = 1
          http_invalid_state         = 2
          http_processing_failed     = 3
          OTHERS                     = 4.

      IF sy-subrc NE 0.
        lv_response_json = lo_http_client->response->get_cdata( ).
        lo_http_client->response->get_status( IMPORTING code = lv_http_response_status ).
        RAISE EXCEPTION TYPE zcx_kb_ws_error
          EXPORTING
            textid = gc_error_texts-http_receive.
      ELSE.
        lv_response_json = lo_http_client->response->get_cdata( ).
        lo_http_client->response->get_status( IMPORTING code = lv_http_response_status ).

        CLEAR ls_token_response.
        GET REFERENCE OF ls_token_response INTO lref_response.
        CREATE OBJECT lo_json_parser.
        TRY.
            lo_json_parser->zkb_if_gis_parser~deserialize(
              EXPORTING
                native_string = lv_response_json
              CHANGING
                abap_data     = lref_response ).

          CATCH cx_root.
            RAISE EXCEPTION TYPE zcx_kb_ws_error
              EXPORTING
                textid = gc_error_texts-json_parsing.
        ENDTRY.

        IF ls_token_response-access_token IS NOT INITIAL OR ls_token_response-token_type IS NOT INITIAL.
          CONCATENATE ls_token_response-token_type ls_token_response-access_token INTO gv_token SEPARATED BY space.
        ELSEIF ls_token_response-errorcode IS NOT INITIAL.
          RAISE EXCEPTION TYPE zcx_kb_ws_error
            EXPORTING
              textid = gc_error_texts-http_message.
        ENDIF.

      ENDIF.
    ENDIF.
  ENDIF.


ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZKB_CL_SERVICE->SEND_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IREF_REQUEST_DATA              TYPE REF TO DATA(optional)
* | [<---] EV_RESPONSE_TEXT               TYPE        STRING
* | [<-->] CREF_RESPONSE_DATA             TYPE REF TO DATA(optional)
* | [!CX!] ZCX_KB_WS_ERROR_TOKEN_EXPIRED
* | [!CX!] ZCX_KB_WS_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD SEND_REQUEST.
  DATA:
    lv_json_request  TYPE string,
    lv_json_response TYPE string,
    lv_no_more       TYPE abap_bool,
    lo_exception     TYPE REF TO zcx_kb_ws_error.

  lv_json_request = get_json_from_input( iref_request_data ).
  CLEAR lv_no_more.
  TRY .
      lv_json_response = call_service( lv_json_request ).
    CATCH zcx_kb_ws_error_token_expired INTO lo_exception.
      IF lv_no_more IS INITIAL.
        lv_no_more = abap_true.
        RETRY.
      ELSE.
        RAISE EXCEPTION lo_exception.
      ENDIF.
    CATCH zcx_kb_ws_error INTO lo_exception.
      RAISE EXCEPTION lo_exception.
  ENDTRY.
  ev_response_text = lv_json_response.
  IF cref_response_data IS SUPPLIED.
    get_data_from_json(
      EXPORTING
        iv_json_string = lv_json_response
      CHANGING
        cref_data      =  cref_response_data  ).
  ENDIF.
ENDMETHOD.
ENDCLASS.
